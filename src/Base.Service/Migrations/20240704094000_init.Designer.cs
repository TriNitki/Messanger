// <auto-generated />
using System;
using Base.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Base.Service.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20240704094000_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Base.Authentication.Core.RefreshToken", b =>
                {
                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid")
                        .HasColumnName("family_id");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Content")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("FamilyId")
                        .HasDatabaseName("ix_refresh_tokens_family_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Base.Authentication.Core.RefreshTokenFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.HasKey("Id")
                        .HasName("pk_refresh_token_families");

                    b.ToTable("refresh_token_families", (string)null);
                });

            modelBuilder.Entity("Base.DataAccess.Entities.Feature", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Name")
                        .HasName("pk_features");

                    b.ToTable("features", (string)null);
                });

            modelBuilder.Entity("Base.DataAccess.Entities.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Name")
                        .HasName("pk_role");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "DefaultRole",
                            Description = "Default role"
                        });
                });

            modelBuilder.Entity("Base.DataAccess.Entities.RoleToFeature", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<string>("FeatureId")
                        .HasColumnType("text")
                        .HasColumnName("feature_id");

                    b.HasKey("RoleId", "FeatureId")
                        .HasName("pk_role_to_feature");

                    b.HasIndex("FeatureId")
                        .HasDatabaseName("ix_role_to_feature_feature_id");

                    b.ToTable("role_to_feature", (string)null);
                });

            modelBuilder.Entity("Base.DataAccess.Entities.RoleToUser", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId")
                        .HasName("pk_role_to_user");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_role_to_user_user_id");

                    b.ToTable("role_to_user", (string)null);
                });

            modelBuilder.Entity("Base.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocked");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasAlternateKey("Login")
                        .HasName("ak_users_login");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Base.Authentication.Core.RefreshToken", b =>
                {
                    b.HasOne("Base.Authentication.Core.RefreshTokenFamily", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_refresh_token_families_family_id");

                    b.HasOne("Base.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Base.DataAccess.Entities.RoleToFeature", b =>
                {
                    b.HasOne("Base.DataAccess.Entities.Feature", "Feature")
                        .WithMany("Roles")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_to_feature_features_feature_id");

                    b.HasOne("Base.DataAccess.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_to_feature_role_role_id");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Base.DataAccess.Entities.RoleToUser", b =>
                {
                    b.HasOne("Base.DataAccess.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_to_user_role_role_id");

                    b.HasOne("Base.DataAccess.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_to_user_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Base.DataAccess.Entities.Feature", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Base.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
